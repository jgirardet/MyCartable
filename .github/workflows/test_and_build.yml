name: test et build

on: [push, pull_request]

#env:
#  CODECOV_TOKEN: b12c1d6f-032c-40bf-ab16-3cc301e48115
#  USE_SDL2: 1



jobs:
  Linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os : [ubuntu-latest, ubuntu-18.04]
        python: [3.7]
    env:
      DISPLAY: ':99.0'
    steps:
    - name: get repo
      uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}
    - name: setup conda env
      uses: goanpeca/setup-miniconda@v1
      with:
        miniconda-version: 'latest'
        python-version: ${{ matrix.python }}
        environment-file: MyCartableEnv.yml
        auto-activate-base: false
        activate-environment: MyCartableEnv
    - name: test conda
    - shell: bash -l {0}
      run: |
        conda info
    - name: setup ${{ matrix.os }}
      run: |
        sudo apt install libxkbcommon-x11-0
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX
#        make install_linux_ci
    - name: Tests python on ${{ matrix.os }}
      run: |
        conda info
        pytest -s
#        make test
    - name: Install Qt on ${{ matrix.os }}
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.14.1'
        host: 'linux'
        target: 'desktop'
    - name: Tests QML on ${{ matrix.os }}
      run: |
        python tests/qml_tests/create-js-data.py
        qmake -o target/qml_tests/Makefile tests/qml_tests/qml_tests.pro -spec linux-g++ CONFIG+=debug CONFIG+=qml_debug
        make -C target/qml_tests
        ./target/qml_tests/qml_tests
    - name: Coverage on ${{ matrix.os }}
      run: |
        rm -rf .pytest_cache
        make cov
    - name: build on ${{ matrix.os }}
      run: |
        make build_dir
#        poetry run  python scripted/build_executable.py
    - name: upload  on ${{ matrix.os }} binary in artifact
      uses: actions/upload-artifact@v1
      with:
        path: dist/MyCartable
        name: MyCartable-Linux64

  Windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, windows-latest]
        python: [3.7]
    steps:
    - name: get repo  on ${{ matrix.os }}
      uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: setup ${{matrix.os}}
      run: |
          conda env create -f MyCartableEnvWin.yml
    - name: Tests python on ${{matrix.os}}
      run: |
          conda run -n MyCartableEnvWin python -m pytest -s
    - name: Install Qt on ${{ matrix.os }}
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.14.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw73'
    - name: Tests QML on ${{ matrix.os }}
      run: |
          conda run -n MyCartableEnvWin python tests/qml_tests/create-js-data.py
          qmake tests\qml_tests\qml_tests.pro -spec win32-g++ "CONFIG+=debug" "CONFIG+=qml_debug"  -o target/qml_tests/Makefile
          mingw32-make.exe -j4 -C target/qml_tests
          target\qml_tests\qml_tests.exe

    - name: build on ${{ matrix.os }}
      run: |
        conda run -n MyCartableEnvWin pyinstaller scripts/dir.spec -y --clean

#    #        poetry run  python scripted/build_executable.py
    - name: upload  on ${{ matrix.os }} binary in artifact
      uses: actions/upload-artifact@v1
      with:
        path: dist/MyCartable
        name: MyCartable-Win64
#      with:
#        path: dist/MyCartable.exe
#        name: MyCartable.exe



#
#  Test_linux:
#    needs: [Linux]
#    runs-on: ubuntu-latest
#    env:
#      DISPLAY: ':99.0'
#    steps:
#      - name: Set up Python
#        uses: actions/setup-python@v1
#        with:
#          python-version: 3.7
#      - name: Download Linux binary
#        uses: actions/download-artifact@v1
#        with:
#          name: MyDevoirs
#      - name: setup_env
#        run: |
#          sudo rm -f /etc/apt/sources.list.d/dotnetdev.list /etc/apt/sources.list.d/microsoft-prod.list
#          sudo apt update
#          sudo apt install -y language-pack-fr pulseaudio
#          /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1280x720x24 -ac +extension GLX
#          pip install -U  appdirs
#          chmod +x MyDevoirs/MyDevoirs
#      - name: run_script
#        run: |
#          wget https://raw.githubusercontent.com/jgirardet/mydevoirs/master/scripted/check_executable.py
#          python check_executable.py
#  Test_windows:
#
#    needs: [Windows]
#    runs-on: windows-latest
#    env:
#      KIVY_GL_BACKEND: 'angle_sdl2'
#    steps:
#      - name: Set up Python
#        uses: actions/setup-python@v1
#        with:
#          python-version: 3.7
#      - name: Download Windows binary
#        uses: actions/download-artifact@v1
#        with:
#          name: MyDevoirs.exe
#      - name: run_script
#        run: |
#          pip install -U appdirs
#          (New-Object System.Net.WebClient).DownloadFile("https://raw.githubusercontent.com/jgirardet/mydevoirs/master/scripted/check_executable.py", "check_executable.py")
#          python check_executable.py
#  Deploy:
#    name: release github
#    needs: [Test_linux, Test_windows]
#    runs-on: ubuntu-latest
#    if: ! contains(github.ref, "vrefs")
#    steps:
#      - name: Download windows binary
#        uses: actions/download-artifact@v1
#        with:
#          name: MyDevoirs.exe
#      - name: Download Linux binary
#        uses: actions/download-artifact@v1
#        with:
#          name: MyDevoirs
#      - name: release git_hub
#        uses: xresloader/upload-to-github-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          file: "MyDevoirs;MyDevoirs.exe"
#          tags: true
#          draft: False
#          release_name: MyDevoirs v${{github.ref}}
#          tag_name: v${{github.ref}}