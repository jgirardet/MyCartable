name: test et build

on: [push, pull_request]

#env:
#  CODECOV_TOKEN: b12c1d6f-032c-40bf-ab16-3cc301e48115
#  USE_SDL2: 1



jobs:
#  Linux:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os : [ubuntu-latest]
#        python: [3.7]
#    env:
#      DISPLAY: ':99.0'
#    steps:
#    - name: get repo
#      uses: actions/checkout@v1
#    - name: Set up Python
#      uses: actions/setup-python@v1
#      with:
#        python-version: ${{ matrix.python }}
#    - name: setup ${{ matrix.os }}
#      run: |
#        sudo apt install libxkbcommon-x11-0
#        make install_linux_ci
#        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX
#    - name: Tests python on ${{ matrix.os }}
#      run: |
#        python -m pytest -vvv -s
#    - name: Install Qt on ${{ matrix.os }}
#      uses: jurplel/install-qt-action@v2
#      with:
#        version: '5.14.1'
#        host: 'linux'
#        target: 'desktop'
#    - name: Tests QML on ${{ matrix.os }}
#      run: |
#        python tests/qml_tests/create-js-data.py
#        qmake -o target/qml_tests/Makefile tests/qml_tests/qml_tests.pro -spec linux-g++ CONFIG+=debug CONFIG+=qml_debug
#        make -C target/qml_tests
#        ./target/qml_tests/qml_tests
#    - name: Coverage on ${{ matrix.os }}
#      run: |
#        rm -rf .pytest_cache
#        coverage run --rcfile=.coveragerc -m pytest
#        coverage report
#    - name: build on ${{ matrix.os }}
#      run: |
#        pyinstaller main.spec -F --clean -y
##        poetry run  python scripted/build_executable.py
#    - name: upload  on ${{ matrix.os }} binary in artifact
#      uses: actions/upload-artifact@v1
#      with:
#        path: dist/MyCartable
#        name: MyCartable

  Windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python: [3.7]
    steps:
    - name: get repo  on ${{ matrix.os }}
      uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
#    - name: setup ${{matrix.os}}
#      run: |
#          pip install -U pip
#          pip install -r requirements/base.txt
#    - name: Tests python on ${{matrix.os}}
#      run: |
#          python -m pytest -vvv -s
    - name: Install Qt on ${{ matrix.os }}
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.14.1'
        host: 'windows'
        target: 'desktop'
    - name: Tests QML on ${{ matrix.os }}
      run: |
        CALL "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        ECHO Qt5_Dir
        SET _ROOT=Qt5_Dir
        ECHO _ROOT
#        ECHO ${{ github.workspace }}
#        ECHO _ROOT
#        SET PATH=%_ROOT%\qtbase\bin;%_ROOT%\gnuwin32\bin;%PATH%
#        REM Uncomment the below line when using a git checkout of the source repository
#        REM SET PATH=%_ROOT%\qtrepotools\bin;%PATH%
#        qmake -o target/qml_tests/Makefile tests/qml_tests/qml_tests.pro -spec win32-msvc CONFIG+=debug CONFIG+=qml_debug
#        mingw32-make -C target/qml_tests
#        ./target/qml_tests/qml_tests
#    - name: Tests QML on ${{ matrix.os }}
#      run: |
#        CALL "C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Auxiliary\Build\vcvarsall.bat" <arch>
#        SET _ROOT=C:\Qt\Qt-5
#        SET PATH=%_ROOT%\qtbase\bin;%_ROOT%\gnuwin32\bin;%PATH%
#        REM Uncomment the below line when using a git checkout of the source repository
#        REM SET PATH=%_ROOT%\qtrepotools\bin;%PATH%
#        SET _ROOT=
#        qmake -o target/qml_tests/Makefile tests/qml_tests/qml_tests.pro -spec win32-msvc CONFIG+=debug CONFIG+=qml_debug
#        make -C target/qml_tests
#        ./target/qml_tests/qml_tests
#    - name: Coverage
#      run: |
#        python tests/qml_tests/create-js-data.py A REMETTRE
#        set QMAKESPEC=win32-msvc
#        qmake -o target/qml_tests/Makefile tests/qml_tests/qml_tests.pro CONFIG+=debug CONFIG+=qml_debug
#        rm -rf .pytest_cache
#              coverage run --rcfile=.coveragerc -m pytest
#              coverage report
    - name: build on ${{ matrix.os }}
      run: |
        pyinstaller main.spec -F --clean -y
    #        poetry run  python scripted/build_executable.py
    - name: upload  on ${{ matrix.os }} binary in artifact
      uses: actions/upload-artifact@v1
      with:
        path: dist/MyCartable.exe
        name: MyCartable.exe
#    - name: Install poetry
#      run: |
#        python -m pip install poetry
#        poetry run python -m pip install --upgrade pip
#    - name: Install Windows dependencies
#      run: |
#        poetry run python -m pip install  docutils pygments pypiwin32 kivy_deps.sdl2==0.1.22 kivy_deps.glew==0.1.12 kivy_deps.gstreamer==0.1.17 kivy_deps.angle==0.1.9 pywin32-ctypes pefile
#    - name: Install common dependencies
#      run: poetry install
#    - name: Tests
#      run: |
#        poetry run python -m pytest -vvv -s
#    - name: Coverage
#      run: |
#        poetry run coverage run --rcfile=.coveragerc_win -m pytest
#        poetry run coverage report
#    - name: build
#      run: |
#        poetry run  python scripted/build_executable.py
#    - name: upload Window binary in artifact
#      uses: actions/upload-artifact@v1
#      with:
#        path: dist/MyDevoirs.exe
#        name: MyDevoirs.exe


#
#  Test_linux:
#    needs: [Linux]
#    runs-on: ubuntu-latest
#    env:
#      DISPLAY: ':99.0'
#    steps:
#      - name: Set up Python
#        uses: actions/setup-python@v1
#        with:
#          python-version: 3.7
#      - name: Download Linux binary
#        uses: actions/download-artifact@v1
#        with:
#          name: MyDevoirs
#      - name: setup_env
#        run: |
#          sudo rm -f /etc/apt/sources.list.d/dotnetdev.list /etc/apt/sources.list.d/microsoft-prod.list
#          sudo apt update
#          sudo apt install -y language-pack-fr pulseaudio
#          /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1280x720x24 -ac +extension GLX
#          pip install -U  appdirs
#          chmod +x MyDevoirs/MyDevoirs
#      - name: run_script
#        run: |
#          wget https://raw.githubusercontent.com/jgirardet/mydevoirs/master/scripted/check_executable.py
#          python check_executable.py
#  Test_windows:
#
#    needs: [Windows]
#    runs-on: windows-latest
#    env:
#      KIVY_GL_BACKEND: 'angle_sdl2'
#    steps:
#      - name: Set up Python
#        uses: actions/setup-python@v1
#        with:
#          python-version: 3.7
#      - name: Download Windows binary
#        uses: actions/download-artifact@v1
#        with:
#          name: MyDevoirs.exe
#      - name: run_script
#        run: |
#          pip install -U appdirs
#          (New-Object System.Net.WebClient).DownloadFile("https://raw.githubusercontent.com/jgirardet/mydevoirs/master/scripted/check_executable.py", "check_executable.py")
#          python check_executable.py
#  Deploy:
#    name: release github
#    needs: [Test_linux, Test_windows]
#    runs-on: ubuntu-latest
#    if: ! contains(github.ref, "vrefs")
#    steps:
#      - name: Download windows binary
#        uses: actions/download-artifact@v1
#        with:
#          name: MyDevoirs.exe
#      - name: Download Linux binary
#        uses: actions/download-artifact@v1
#        with:
#          name: MyDevoirs
#      - name: release git_hub
#        uses: xresloader/upload-to-github-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          file: "MyDevoirs;MyDevoirs.exe"
#          tags: true
#          draft: False
#          release_name: MyDevoirs v${{github.ref}}
#          tag_name: v${{github.ref}}