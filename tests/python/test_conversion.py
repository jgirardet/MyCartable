import os
import base64

import pytest
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QImage, QColor
from PyQt5.QtQuick import QQuickItem
from mycartable.conversion.pdf import PDFSplitter, save_pdf_pages_to_png
from mycartable import WIN
from mycartable.conversion import Grabber, WImage


@pytest.mark.parametrize(
    "index, cpu, range_res",
    [
        (0, 2, range(0, 4)),
        (1, 2, range(4, 7)),
        (1, 1, []),
        (0, 1, range(0, 7)),
        (0, 3, range(0, 3)),
        (1, 3, range(3, 6)),
        (2, 3, range(6, 7)),
    ],
)
def test_save_pages_to_png(tmp_path, new_res, index, cpu, range_res):
    save_pdf_pages_to_png(index, cpu, new_res("pdf7pages.pdf"), tmp_path)
    assert set(tmp_path.glob("*.png")) == {tmp_path / f"{i}.png" for i in range_res}


@pytest.mark.parametrize(
    "cpu",
    [None, 1, 2, 4],
)
def test_split_pdf_to_png(tmp_path, new_res, qtbot, cpu):

    # skip in CI
    if os.environ.get("CI", None) and cpu is None:
        return True

    splitter = PDFSplitter()
    res = splitter(new_res("pdf7pages.pdf"), tmp_path, cpu)
    assert res == [tmp_path / f"{i}.png" for i in range(7)]


class Test_Wimage:
    def test_base(self):
        a = WImage()

    def test_to_base64(self, resources):
        img = WImage(str(resources / "test_pivoter.png"))
        b64 = img.to_base64()
        assert (
            b64
            == b"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"
        )
        onlybytes = base64.b64decode(b64)
        newImg = WImage.fromData(onlybytes)
        assert img == newImg

    def test_eq(self, resources):
        img = WImage(str(resources / "test_pivoter.png"))
        assert img == img.convertToFormat(QImage.Format_RGBX8888)

    def test_floodfill(self):
        """cf databaose mixin"""

    def test_change_color(self):
        w = WImage(2, 2, QImage.Format_ARGB32)
        w.setPixelColor(0, 0, QColor("transparent"))
        w.setPixelColor(0, 1, QColor("blue"))
        w.setPixelColor(1, 0, QColor("red"))
        w.setPixelColor(1, 1, QColor("transparent"))

        w.change_color(QColor("purple"))
        assert w.pixelColor(0, 0) == QColor("transparent")
        assert w.pixelColor(0, 1) == QColor("purple")
        assert w.pixelColor(1, 0) == QColor("purple")
        assert w.pixelColor(1, 1) == QColor("transparent")


@pytest.mark.usefixtures("qapp")
class TestGrabber:
    QML = """

    import QtQuick 2.15

    Item {
        id: item

        width: 200
        height: 200

        Rectangle {
            id: rect

            anchors.fill: parent
            color: "yellow"
            border.width: 5
            border.color: "pink"
        }
    }"""

    QML_PROP = """import QtQuick 2.15
    import QtQuick.Controls 2.15
    Item {
        id: item

        width: 200
        height: 200
        property string aaa

        Rectangle {
            id: rect

            anchors.fill: parent
            color: "blue"
            border.width: 5
            border.color: "green"
            Button {
                text: item.aaa
            }
        }
    }

    """

    QML_NOSIZE = """import QtQuick 2.15

    Item {
        id: item


        Rectangle {
            id: rect

            anchors.fill: parent
            color: "blue"
            border.width: 5
            border.color: "green"
        }
    }

    """
    QML_NOSIZE_BUT_PARENT = """import QtQuick 2.15
        Rectangle {
            id: rect

            anchors.fill: parent
            color: "blue"
            border.width: 5
            border.color: "green"
        }

    """
    QML_CANVAS = """import QtQuick 2.15

    Item {
        id: item
        property alias canvas: canvas
        objectName: "itemitem"
        property int status: 0
        signal loaded

        Canvas {
            id: canvas
            objectName: "canvas"

            anchors.fill: parent
            onAvailableChanged: {
                if(available)
                    paint(item.childrenRect)
            }
            //Component.onCompleted: {
            //        paint(item.childrenRect)
            //}
            onPaint: {
                let ctx = canvas.getContext("2d");
                print("write canvas")
                item.status = 1
                loaded()
                
                }

            
        }
    }

    """

    def test_simple(self, resources, tmpfilename):

        tmpfilename.write_text(self.QML)
        g = Grabber(QUrl.fromLocalFile(str(tmpfilename)))
        img1 = g()

        assert img1 == WImage(str(resources / "convert" / "data.png"))

    def test_2_fois(self, resources, tmpfilename):
        tmpfilename.write_text(self.QML)
        g = Grabber(QUrl.fromLocalFile(str(tmpfilename)))
        img1 = g()
        img3 = g()
        g = Grabber(QUrl.fromLocalFile(str(tmpfilename)))
        img2 = g()

        # 2 fois juste pour voir si on peut répéter le contextmanager
        assert img1 == img2 == img3
        assert img1 == WImage(str(resources / "convert" / "data.png"))

    def test_comp_to_image_with_context_fail(self, resources, tmpfilename):
        """le texte du component est undefined donc l'image est pas la meme"""
        tmpfilename.write_text(self.QML_PROP)
        g = Grabber(QUrl.fromLocalFile(str(tmpfilename)))
        img1 = g()
        assert img1 != WImage(str(resources / "convert" / "context.png"))

    @pytest.mark.skipif(WIN, reason="img comparaison fails on windows but img is good")
    def test_comp_to_image_with_context_pass(self, resources, tmpfilename):
        img_control = WImage(str(resources / "convert" / "context.png"))
        # version  du context à la volé
        tmpfilename.write_text(self.QML_PROP)
        g = Grabber(QUrl.fromLocalFile(str(tmpfilename)), {"aaa": "hello"})
        img1 = g()
        assert img1 == img_control

    def test_without_size(self, resources, tmpfilename):
        tmpfilename.write_text(self.QML_NOSIZE)
        g = Grabber(QUrl.fromLocalFile(str(tmpfilename)), timeout=1)
        img1 = g()
        assert img1 is None

    def test_comp_to_image_with_qrc(self, resources):
        g = Grabber(url=QUrl("qrc:///tests/Dummy.qml"))
        img = g()
        assert img == WImage(str(resources / "convert" / "data.png"))

    def test_canvas(self, qtlog, qtbot, tmpfilename):
        tmpfilename.write_text(self.QML_CANVAS)
        g = Grabber(
            QUrl.fromLocalFile(str(tmpfilename)), params={"width": 400, "height": 300}
        )
        qtbot.wait(100)
        g()
        assert "write canvas" in [r.message for r in qtlog.records]
